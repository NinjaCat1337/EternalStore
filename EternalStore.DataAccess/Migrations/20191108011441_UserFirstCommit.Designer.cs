// <auto-generated />
using System;
using EternalStore.DataAccess.UserManagement;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EternalStore.DataAccess.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20191108011441_UserFirstCommit")]
    partial class UserFirstCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EternalStore.Domain.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUser")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnName("login")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(200);

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnName("registrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("users_tb");
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUserAddress")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("address")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(100);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idUser");

                    b.ToTable("userAddresses_tb");
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserInformation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("idUserInformation")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstName")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasColumnName("lastName")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("usersInformation_tb");
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idUserNumber")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("number")
                        .HasColumnType("nvarchar")
                        .HasMaxLength(30);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("idUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("idUser");

                    b.ToTable("userNumbers_tb");
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserAddress", b =>
                {
                    b.HasOne("EternalStore.Domain.UserManagement.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserInformation", b =>
                {
                    b.HasOne("EternalStore.Domain.UserManagement.User", "User")
                        .WithOne("UserInformation")
                        .HasForeignKey("EternalStore.Domain.UserManagement.UserInformation", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EternalStore.Domain.UserManagement.UserNumber", b =>
                {
                    b.HasOne("EternalStore.Domain.UserManagement.User", "User")
                        .WithMany("UserNumbers")
                        .HasForeignKey("idUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
